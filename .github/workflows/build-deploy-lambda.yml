name: AWS Deploy

on:
  workflow_call:
    inputs:
      AWS_ACCOUNT_ID:
        required: true
        description: 'AWS Account ID'
        type: string
      AWS_REGION:
        required: true
        description: 'AWS Region'
        type: string
      DOCKERFILE:
        required: false
        description: 'Path to the Dockerfile'
        default: Dockerfile
        type: string
      BUILD_CONTEXT:
        required: false
        description: 'Docker build context'
        default: "."
        type: string
      BUILD_OPT:
        required: false
        description: 'Path to the environment file'
        default: ""
        type: string
      PLATFORM:
        required: false
        description: 'docker image platfrom'
        default: "linux/arm64"
        type: string

      APP_NAME:
        required: true
        description: 'Name of the application'
        type: string
      PROJECT_NAME:
        required: true
        description: 'Name of the project(group)'
        type: string
      CLUSTER_NAME:
        required: true
        description: 'Name of the ecs cluster'
        type: string
      RUNNER:
        required: false
        default: "self-hosted"
        type: string

      

env:
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPOSITORY_URI: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.PROJECT_NAME }}/${{ inputs.APP_NAME }}-${{ inputs.CLUSTER_NAME }}
  LAMBDA_NAME: cs-${{ inputs.PROJECT_NAME }}-${{ inputs.APP_NAME }}-${{ inputs.CLUSTER_NAME }}
  ROLE_NAME: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/cs-${{ inputs.PROJECT_NAME }}-${{ inputs.APP_NAME }}-${{ inputs.CLUSTER_NAME }}-github-role
jobs:
  build-and-push:
    runs-on: ${{ inputs.RUNNER }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_NAME }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker buildx build --platform ${{ inputs.PLATFORM }} ${{ inputs.BUILD_OPT }} \
          -t ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} \
          -t ${{ env.ECR_REPOSITORY_URI }}:latest \
          -f ${{ inputs.DOCKERFILE }} ${{ inputs.BUILD_CONTEXT }} \
          --push

#      - name: Push Docker image to ECR
#        run: |
#          docker tag ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY_URI }}:latest
#          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
#          docker push ${{ env.ECR_REPOSITORY_URI }}:latest

  deploy:
    permissions:
      id-token: write
    runs-on: ${{ inputs.RUNNER }}
    needs: build-and-push
    steps:

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_NAME }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Invoke Lambda
        run: |
          aws lambda invoke \
            --cli-binary-format raw-in-base64-out \
            --region ${{ inputs.AWS_REGION }} \
            --function-name ${{ env.LAMBDA_NAME }} \
            --payload '{"imageName": "'"${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}"'"}' \
            response.json

          statusCode=$(jq '.statusCode' response.json)
          message=$(jq -r '.body | fromjson | .error' response.json)

          if [ "$statusCode" -ne 200 ]; then
            echo "Error: Lambda function failed with status code $statusCode"
            [ -n "$message" ] && [ "$message" != "null" ] && echo "Error message: $message"
            exit 1
          else
            echo "Lambda function succeeded."
            exit 0
          fi
